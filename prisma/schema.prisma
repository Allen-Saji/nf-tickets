generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  role          Role           @default(ATTENDEE)
  wallets       String[]       @default([])
  password      String?
  accounts      Account[]
  artistProfile ArtistProfile?
  sessions      Session[]
}

model ArtistProfile {
  id                 Int      @id @default(autoincrement())
  userId             String   @unique
  artistName         String
  bio                String?
  genre              String
  profilePictureUrl  String?
  backgroundImageUrl String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  events             Event[]
}

model Event {
  id                   Int           @id @default(autoincrement())
  artistId             Int
  eventName            String
  eventDate            DateTime
  venue                String
  city                 String
  category             Category
  capacity             Int
  description          String?
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  imageUrl             String
  artistWallet         String
  isTicketTransferable Boolean       @default(false)
  managerPDA           String
  eventPublicKey       String
  ticketPrice          Float
  ticketsRemaining     Int
  venueAuthority       String        @default("HLgXScitaoBUU3S9DhqBSHSXuHzgDX3kdSVJ2YzsS6HR")
  artist               ArtistProfile @relation(fields: [artistId], references: [id])
  tickets              Ticket[]
}

model Ticket {
  id            Int    @id @default(autoincrement())
  ticketAddress String @unique
  ownerWallet   String
  txnSignature  String
  eventId       Int
  event         Event  @relation(fields: [eventId], references: [id])
}

model Platform {
  id             String   @id @default(cuid())
  platformName   String   @unique
  programId      String
  platformPda    String   @unique
  rewardsMintPda String   @unique
  treasuryPda    String   @unique
  adminWallet    String
  fee            Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Category {
  Music
  Comedy
  Tech
  Dance
  Sports
}

enum Provider {
  Google
}

enum Role {
  ATTENDEE
  ARTIST
}
